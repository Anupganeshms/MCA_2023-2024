QUES: Consider the MNIST data set and implement CNN architecture to identify the handwritten images. Optimize the model and display the output.


import numpy as np
import cv2
import tensorflow as tf
import matplotlib.pyplot as plt

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)


model = tf.keras.models.Sequential([
tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28,1)),
tf.keras.layers.MaxPooling2D((2, 2)),
tf.keras.layers.Flatten(),
tf.keras.layers.Dense(128, activation='relu'),
tf.keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])


model.fit(x_train, y_train, epochs=5)
# Save the model
#model.save('handwritten_cnn.model')
# Load the model
#model = tf.keras.models.load_model('handwritten_cnn.model')

loss, accuracy = model.evaluate(x_test, y_test)
print("Test loss:", loss)
print("Test accuracy:", accuracy)

image_path = "./img/img.png"
img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (28, 28))
img = img / 255.0 # Normalize pixel values
img = img.reshape(1, 28, 28, 1)

prediction = model.predict(img)
predicted_digit = np.argmax(prediction)
print(f"This digit is probably a {predicted_digit}")

# Display the original image
plt.subplot(1, 2, 1)
plt.imshow(img.reshape(28, 28), cmap='gray', vmin=0, vmax=1)
plt.title('Input Image')
plt.axis('off')
# Display the model's prediction probabilities
plt.subplot(1, 2, 2)
plt.bar(range(10), prediction[0])
plt.xticks(range(10))


plt.title('Model Prediction')
plt.xlabel('Digit')
plt.ylabel('Probability')
plt.tight_layout()
plt.show()
