Ques: Demonstrate Dependency Injection using constructor based using Spring boot.


Lab-2

1. College.java

package com.example.Institute;

public class College {
	String Name, Address;
	
	public String getName() {
		return Name;
	}
	public void setName(String name) {
		Name = name;
	}
	public String getAddress() {
		return Address;
	}
	public void setAddress(String address) {
		Address = address;
	}

}

x--------------x------------------x---------------

2. Department.java

package com.example.Institute;

public class Department {
	String name, description;
	int id;
	College college;
	
	public Department(College college) {
	this.college = college;
	}
	
	public College getCollege() {
	return college;
	}
	public void setCollege(College college) {
	this.college = college;
	}
	public String getName() {
	return name;
	}
	public void setName(String name) {
	this.name = name;
	}
	public String getDescription() {
	return description;
	}
	public void setDescription(String
	description) {

	this.description = description;
	}
	public int getId() {
	return id;
	}
	public void setId(int id) {
	this.id = id;
	}

}

x----------------------x-----------------------------

3.Lab2Application.java

package com.example.Institute;

import java.util.Scanner;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

@SpringBootApplication
public class Lab2Application {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		SpringApplication.run(Lab2Application.class, args);
		ApplicationContext ac = new ClassPathXmlApplicationContext("TestBean.xml");
		
		Department dt = (Department)ac.getBean("department");
		
		while(true) {
			System.out.println("1. insert the Department details\n "+ "2. Display Department with College details \n"+ "3. exit");
			System.out.println("enter the choice");
			int a = sc.nextInt();
			
			switch(a) {
				case 1:
				System.out.println("enter the Department name");
	
				dt.setName(sc.next());
				System.out.println("enter the Department no");
				dt.setId(sc.nextInt());
				System.out.println("enter the Department Decription");
				dt.setDescription(sc.next());
				System.out.println("thanks for input");
				break;
	
				case 2:
				System.out.println("Department Details:");
				System.out.println("Name:"+dt.getName()+" "+"ID:"+dt.getId()+" Department Description"+dt.getDescription());
				System.out.println("College Details");
				College c = dt.getCollege();
				System.out.println("College Name: "+c.getName());
				System.out.println("College Address: "+c.getAddress());
				break;
				case 3:
				System.exit(0);
			}
		}
	}

}

x-----------------------x-----------------------x-----------

4. TestBean.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- bean definitions here -->
    <bean id="department" class="com.example.Institute.Department" scope="prototype">
		<constructor-arg name="college" ref="college"/>
	</bean>
	
	<bean id="college" class="com.example.Institute.College" scope="singleton">
		<property name="name" value="RV College of Engineering"/>
		<property name="address" value="Mysuru Road, Bengaluru"/>
	</bean>

</beans>

x------------x----------------------x------------
5.window -> preference -> search maven -> double click on maven -> check Download Artifact Javadoc











