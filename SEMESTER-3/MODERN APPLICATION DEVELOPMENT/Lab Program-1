QUES: Devise a Mobile App to showcase graphics on button states and add a widget at run time.


Program-1 
QUES: Devise a Mobile App to showcase graphics on button states and add a widget at run time.

Ans)
Step-1

Lab1 is the name of the application.
drag and drop the button, Switch into the main layout window.
change the name of button and switch as "Press Me" and "Activity" respectively by going to activity_main.xml


---------x------------------x---------------------x---------

Youtube video Button States: 

https://www.youtube.com/watch?v=Z1w3y0saKjY


---------x------------------x---------------------x---------

Step-2

a.)
first create file button_default drawables.
res---> drawable (right click) new--->select drawable resource file.
create shape drawable.
replace selector with shape in the .xml code.



<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:angle="-90"
        android:startColor="#AD00FFEA"
        android:endColor="#FFFFFF" />
    <padding
        android:bottom="7dp"
        android:left="7dp"
        android:right="7dp"
        android:top="7dp" />
    <corners
        android:radius="15dp"/>
    <stroke
        android:width="2dp"
        android:color="@color/white"/>

</shape>



b.)
Copy and paste another 2 files as button _press and button_dissable.
In both buttons change start and end colour (3 different shape drawables created)



---button _pressed----



<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:angle="-90"
        android:startColor="#9b2b43"
        android:endColor="#d4647c" />
    <padding
        android:bottom="7dp"
        android:left="7dp"
        android:right="7dp"
        android:top="7dp" />
    <corners
        android:radius="15dp"/>
    <stroke
        android:width="2dp"
        android:color="@color/white"/>

</shape>



--button_disabled--



<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:angle="-90"
        android:startColor="#AD000000"
        android:endColor="#FFFFFF" />
    <padding
        android:bottom="7dp"
        android:left="7dp"
        android:right="7dp"
        android:top="7dp" />
    <corners
        android:radius="15dp"/>
    <stroke
        android:width="2dp"
        android:color="@color/white"/>

</shape>



iii.)
create list drawable and put all buttons into it
 make it as custom_button


<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:state_pressed="true"
        android:drawable="@drawable/button_pressed" />
    <item
        android:state_enabled="false"
        android:drawable="@drawable/button_disable"/>
    <item
        android:state_enabled="true"
        android:state_pressed="false"
        android:drawable="@drawable/button_default"/>
</selector>


---------x------------------x---------------------x---------

Step3

change constraint layout into linear layout in .xml file  


<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    tools:context=".MainActivity">

   <CalendarView
       android:id="@+id/calender"
       android:layout_width="wrap_content"
       android:layout_height="wrap_content"
       />

    <androidx.appcompat.widget.AppCompatButton
        android:id="@+id/custom_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Press Me"
        android:layout_marginTop="30dp"
        android:background="@drawable/custom_button"/>

    <Switch
        android:id="@+id/button_switch"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Activity"
        android:checked="true"
        android:padding="20dp"
        tools:ignore="UseSwitchCompatOrMaterialXml" />

</LinearLayout>


---------x------------------x---------------------x---------
Step4


go to java file


package com.example.lab1;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.CalendarView;
import android.widget.CompoundButton;
import android.widget.Switch;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button customButton = findViewById(R.id.custom_button);
        Switch buttonEnabler = findViewById(R.id.button_switch);
        CalendarView calenderView = findViewById(R.id.calender);

        customButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(MainActivity.this, "Button Pressed", Toast.LENGTH_SHORT).show();
                if(calenderView.isEnabled()) {
                    calenderView.setVisibility(View.INVISIBLE);
                    calenderView.setEnabled(false);
                }else{
                    calenderView.setVisibility(View.VISIBLE);
                    calenderView.setEnabled(true);
                }
            }
        });

        buttonEnabler.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                customButton.setEnabled(isChecked);
            }
        });
    }
}



